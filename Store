import java.util.*;
import java.io.*;
public class Store{
    private List <Item> myStore;
    public Store(String fName)
    {
        myStore = new ArrayList <Item>();
        loadFile(fName);
    }

    public Store()
    {
        myStore = new ArrayList <Item>();
        loadFile("file50.txt");
    }

    private void loadFile(String inFileName)
    {
        int itemId;
        int itemInv;
        Scanner inFile;
        try
        {
            inFile = new Scanner(new File(inFileName));
            while(inFile.hasNextInt())
            {
                itemId = inFile.nextInt();
                itemInv= inFile.nextInt();
                myStore.add(new Item(itemId, itemInv));

            }
        }
        catch(IOException e)
        {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void displayStore()
    {
        System.out.print(this);
    }

    public String toString() 
    {
        String str = "";
        str += String.format("%5s", " ");
        str += String.format("%10s", "Id");
        str += String.format("%10s", "Inv");
        str += "\n\n";
        for (int i=0; i<myStore.size(); i++)
        {
            Item temp = myStore.get(i);
            str += String.format("%10s", i+1);
            str += String.format("%10s",temp.getId());
            str += String.format("%10s",temp.getInv());
            str += "\n";
            if((i+1)%10==0 )
                str += "\n";
        }  
        return str;
    }

    public void sort()
    {
        mergeSort(myStore, 0, myStore.size()-1);
    }   

    private void merge(List <Item> a, int first, int mid, int last)
    {
        List<Item> copy = new ArrayList<Item>();
        for(int x=0; x<a.size(); x++)
        {
            copy.add(a.get(x));
        }
        int index1 = first, index2 = mid + 1;
        for(int x=first; x<=last; x++)
        {
            if(index2>last)
            {
                a.set(x,copy.get(index1));
                index1++;
            }
            else if(index1>mid)
            {
                a.set(x,copy.get(index2));
                index2++;
            }
            else if((copy.get(index1)).compareTo(copy.get(index2)) < 0)
            {
                a.set(x,copy.get(index1));
                index1++;
            }
            else
            {
                a.set(x,copy.get(index2));
                index2++;
            }
        }
    }

    private void mergeSort(List <Item> list, int first, int last)
    {
        if(last-first==0)
        {
            return;
        }
        else if(last-first==1)
        {
            if(list.get(first).compareTo(list.get(last)) > 0)
            {
                Item temp = list.get(first);
                list.set(first, list.get(last));
                list.set(last, temp);
            }
        }
        else
        {
            int mid = (last+first)/2;
            mergeSort(list, first, mid);
            mergeSort(list, mid+1, last);
            merge(list, first, mid, last);
        }
    }

    public void testSearch(){
        int idToFind;
        int invReturn;
        int index;
        Scanner in = new Scanner(System.in);

        System.out.println("Testing search algorithm\n");
        do{
            System.out.println();
            System.out.print("Enter Id value to search for (-1 to quit) ---> ");
            idToFind = in.nextInt();
            //index = bsearch(new Item(idToFind, 0));
            index = bsearch (new Item(idToFind, 0), 0, myStore.size()-1);
            System.out.print("Id # " + idToFind);
            if (index == -1){
                System.out.println("     No such part in stock");
            }else{
                System.out.println("     Inventory = " + myStore.get(index).getInv());
            }
        } while (idToFind >= 0);
    }

    private int bsearch(Item idToSearch){
        int first = 0;
        int last = myStore.size()-1;
        while(first<=last)
        {
            int mid = (first+last)/2;
            Item midObj = myStore.get(mid);
            if(midObj.equals(idToSearch))
                return mid;
            else if(midObj.compareTo(idToSearch)<0)
                first = mid+1;
            else
                last=mid-1;
        }
        return -1;
    }

    private int bsearch(Item idToSearch, int first, int last){
        if(first>last)
            return -1;
        int mid=(first+last)/2;
        Item middle = myStore.get(mid);
        if(middle.equals(idToSearch))
            return mid;
        else if(middle.compareTo(idToSearch) < 0)
            return bsearch(idToSearch, mid+1, last);
        else
            return bsearch(idToSearch, first, mid-1);
    }
}



